_target_: src.models.pgan_unidirection_module.PixelGANModule

name: Pgan

optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.0001
  betas: [0.5, 0.999]
  weight_decay: 0.0001

scheduler:
  _target_: torch.optim.lr_scheduler.MultiStepLR
  _partial_: true
  milestones: [250000, 300000]
  gamma: 0.5

netG_A:
  _target_: src.models.components.networks_define.define_G
  netG_type: resnet_generator
  input_nc: 1
  output_nc: 1
  ngf: 64
  norm_layer: 'instance'
  use_dropout: False
  init_type: 'normal'

netD_A:
  _target_: src.models.components.networks_define.define_D
  input_nc: 1
  ndf: 64
  norm: 'instance'
  n_layers_D: 3
  init_type: 'normal'

netD_B:
  _target_: src.models.components.networks_define.define_D
  input_nc: 1
  ndf: 64
  norm: 'instance'
  n_layers_D: 3
  init_type: 'normal'

params: # Other params
  pool_size: 0
  lambda_l1: 20
  lambda_percept: 20
  reverse: ${data.reverse} # A->B if False, B->A if True
  use_split_inference: ${data.use_split_inference}
  flip_equivariance: False
  batch_size: ${data.batch_size}
  nce_on_vgg: True
  eval_on_align: ${data.eval_on_align}
  use_sliding_inference: ${data.use_sliding_inference}
  use_multicontrast: ${data.use_multicontrast} # Set True if data_group_3 is exist